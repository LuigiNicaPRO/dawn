{%- comment -%}
{
  "pack_name": "Shop the look",
  "pack_author": "Design Packs"
}
{%- endcomment -%}

{% comment %} Security Code - hides section when app uninstalled {% endcomment %}
{%- unless content_for_header contains 'design_packs_file.js' -%}
  {%- if request.design_mode -%}
    <div class="dsgn-pck__no-app-warning">
      <div class="dsgn-pck__no-app-warning-background">
      </div>
      <div class="dsgn-pck__no-app-warning-text dsgn-pck__rte">
        <p><strong>WARNING!</strong> This premium section will not display properly without an active subscription for <a href="https://apps.shopify.com/design-packs" target="_blank" rel="nofollow">Design Packs</a>. If you need any support please email <a href="mailto:info@design-packs.com" target="_blank">info@design-packs.com</a> with your questions.</p>
      </div>
    </div>
  {%- endif -%}
  {%- break -%}
{%- endunless -%}

{% comment %} Images: responsive image widths {% endcomment %}
{%- assign widths = '180, 360, 540, 720, 900, 1080, 1296, 1512, 1728, 1950, 2100, 2260, 2450, 2700, 3000, 3350, 3750, 4100' -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- capture minify -%}
{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  #DP--{{ section.id }} {
    --main-font: {{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }};
    --main-font-weight: {{ section.settings.main_font.weight }};
    --main-font-style: {{ section.settings.main_font.style }};
    --heading-font: {{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }};
    --heading-font-weight: {{ section.settings.heading_font.weight }};
    --heading-font-style: {{ section.settings.heading_font.style }};
  }
{%- endif -%}

#DP--{{ section.id }} {
  --dot-size: 18px;
  background: {{ section.settings.background_color }};
  margin-bottom: {{ section.settings.outer_margin }}px;
  margin-top: {{ section.settings.outer_margin }}px;
}

#DP--{{ section.id }} .dsgn-pck__sizer {
  padding-top: {{ section.settings.inner_padding }}px;
  padding-bottom: {{ section.settings.inner_padding }}px;
  width: {{ section.settings.base_width }}%;
  max-width: {{ max_width }};
}

#DP--{{ section.id }} .dsgn-pck__header {
  margin-bottom: 3em;
  padding: 0 1em;
}

#DP--{{ section.id }} .dsgn-pck__heading {
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 35px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--heading-font);
  font-weight: var(--heading-font-weight);
  font-style: var(--heading-font-style);
  {%- endif -%}
  color: {{ section.settings.text_color }};
}

#DP--{{ section.id }} .dsgn-pck__text {
  line-height: calc(1px + 3ex + 1px);
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--main-font);
  font-weight: var(--main-font-weight);
  font-style: var(--main-font-style);
  {%- endif -%}
  color: {{ section.settings.text_color }};
}

#DP--{{ section.id }} .dsgn-pck__grid {
  display: grid;
  column-gap: 30px;
  grid-template-columns: repeat(2, 1fr);
}

#DP--{{ section.id }} .dsgn-pck__image-wrapper {
  position: relative;
  max-height: 40%;
}

#DP--{{ section.id }} .dsgn-pck__image picture {
  position: relative;
  display: block;
}

#DP--{{ section.id }} .dsgn-pck__image img {
  display: block;
  height: auto;
}

#DP--{{ section.id }} .dsgn-pck__dot-area {
  position: absolute;
  top: 10px;
  left: 10px;
  right: 30px;
  bottom: 30px;
}

#DP--{{ section.id }} .dsgn-pck__product-dot {
  position: absolute;
  width: var(--dot-size);
  height: var(--dot-size);
  top: 50%;
  left: 50%;
  border-radius: 50%;
  cursor: pointer;
  display: block;
  transition: transform 0.5s cubic-bezier(0.15,0.99,0.18,0.99);
  box-shadow: 2px 2px 15px {{ section.settings.pin_highlight_color | color_darken: 30 }};
  background: {{ section.settings.pin_highlight_color }};
}

#DP--{{ section.id }} .dsgn-pck__product-dot::after {
  position: absolute;
  top: -55%;
  left: -55%;
  width: 211%;
  height: 211%;
  content: "";
  border: thin solid {{ section.settings.pin_highlight_color | color_modify: 'alpha', 0.5 }};
  border-radius: 50%;
  transform-origin: 50% 50%;
  transition: background .5s linear,transform .5s cubic-bezier(.15,.99,.18,.99),border-color .2s linear;
}

#DP--{{ section.id }} .dsgn-pck__product-dot.dsgn-pck__product-dot--active {
  transform: scale(1.5);
}

#DP--{{ section.id }} .dsgn-pck__product-dot.dsgn-pck__product-dot--active::after {
  transform: scale(1.1);
  background: {{ section.settings.pin_highlight_color | color_modify: 'alpha', 0.35 }};
  border-color: transparent;
}

#DP--{{ section.id }} .dsgn-pck__product-dot:hover:after {
  transform: scale(1.1);
  background: {{ section.settings.pin_highlight_color | color_modify: 'alpha', 0.35 }};
  border-color: hsla(0,0%,97.6%,0);
}

#DP--{{ section.id }} .dsgn-pck__content {
  width: 100%;
  margin: 0 auto;
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--main-font);
  font-weight: var(--main-font-weight);
  font-style: var(--main-font-style);
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__inner-content {
  display: grid;
  position: relative;
  width: 100%;
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--main-font);
  font-weight: var(--main-font-weight);
  font-style: var(--main-font-style);
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__inner-content > * {
  grid-area: 1 / 1 / 2 / 2;
}

#DP--{{ section.id }} .dsgn-pck__product-info {
  padding: 1.5em;
  opacity: 0;
  transform: scale(0.5);
  transition: opacity .5s linear,transform .5s cubic-bezier(.15,.99,.18,.99);
  display: flex;
  align-items: flex-start;
  pointer-events: none;
  position: relative;
  background: {{ section.settings.product_text_background_color }};
}

#DP--{{ section.id }} .dsgn-pck__product-info--active {
  opacity: 1;
  transform: scale(1);
  pointer-events: all;
}

#DP--{{ section.id }} .dsgn-pck__product-info .dsgn-pck__image__wrapper {
  display: block;
  height: 200px;
  max-width: 40%;
}

#DP--{{ section.id }} .dsgn-pck__product-info .dsgn-pck__image__wrapper img {
  object-fit: contain;
}

#DP--{{ section.id }} .dsgn-pck__product-info .dsgn-pck__image__wrapper svg {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__placeholder {
  background-color: {{ section.settings.background_color | color_darken: 10 }};
}

#DP--{{ section.id }} .dsgn-pck__placeholder {
  fill: {{ section.settings.background_color | color_lighten: 10 }};
}

#DP--{{ section.id }} .dsgn-pck__product-info__text-wrapper {
  flex: 1 0 60%;
  padding: 0 20px;
  align-self: flex-end;
}

#DP--{{ section.id }} .dsgn-pck__small-heading {
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-small-heading-size, var(--dp-small-heading-size, 24px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--heading-font);
  font-weight: var(--heading-font-weight);
  font-style: var(--heading-font-style);
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__button {
  margin: 1.5em 0;
  padding-bottom: 0.5em;
  display: inline-block;
  text-decoration: none;
  position: relative;
  color: {{ section.settings.product_text_color }};
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--main-font);
  font-weight: var(--main-font-weight);
  font-style: var(--main-font-style);
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__button:after {
  content: '';
  display: block;
  height: 2px;
  position: absolute;
  top: 100%;
  left: 0;
  width: 30%;
  transition: all 0.3s ease-out;
  background-color: {{ section.settings.product_text_color }};
}

#DP--{{ section.id }} .dsgn-pck__button:hover:after {
  width: 100%;
}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Landscape phone to portrait tablet */
@media (max-width: 767px) {
  #DP--{{ section.id }} .dsgn-pck__header {
    margin-bottom: 2em;
  }

  #DP--{{ section.id }} .dsgn-pck__grid {
    grid-template-columns: repeat(1, 1fr);
    grid-gap: 30px;
  }

  #DP--{{ section.id }} .dsgn-pck__product-info {
    gap: 20px;
  }

  #DP--{{ section.id }} .dsgn-pck__product-info .dsgn-pck__image__wrapper {
    max-width: 100%;
    height: auto;
  }

  #DP--{{ section.id }} .dsgn-pck__product-info__text-wrapper {
    padding: 10px 0;
  }
}

/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} {
    margin-top: {{ section.settings.outer_margin | divided_by: 2 }}px;
    margin-bottom: {{ section.settings.outer_margin | divided_by: 2 }}px;
  }

  #DP--{{ section.id }} .dsgn-pck__sizer {
    min-width: 70%;
    padding-top: {{ section.settings.inner_padding | divided_by: 2 }}px;
    padding-bottom: {{ section.settings.inner_padding | divided_by: 2 }}px;
  }

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}" class="DP--{{ section.id }} dsgn-pck__shop-the-look dsgn-pck__section">
  <div class="dsgn-pck__sizer">
    <header class="dsgn-pck__header">
      {%- if section.settings.title != blank -%}
        <h2 class="dsgn-pck__heading">
          {{ section.settings.title }}
        </h2>
      {%- endif -%}
      {%- if section.settings.text != blank -%}
        <div class="dsgn-pck__text dsgn-pck__rte">
          {{ section.settings.text }}
        </div>
      {%- endif -%}
    </header>
    <div class="dsgn-pck__grid dsgn-pck__flex">
      <div class="dsgn-pck__image">
        <picture>
          {%- if section.settings.image != blank -%}
            {%- capture sizes -%}
              (max-width: 480px) 90vw, {{ section.settings.base_width | divided_by: 2 | append: 'vw' | default: '33vw' }}
            {%- endcapture -%}
            {{ section.settings.image | image_url: width: 2800 | image_tag:  widths: widths, sizes: sizes }}
          {%- else -%}
            {{ 'collection-1' | placeholder_svg_tag: 'dsgn-pck__placeholder' }}
          {%- endif -%}
          <div class="dsgn-pck__dot-area">
            {%- for block in section.blocks -%}
              <div id="dsgn-pck__product-dot-id-{{ block.id }}" class="dsgn-pck__product-dot {% if forloop.first %}dsgn-pck__product-dot--active{% endif %}" data-dsgn-pck-product-dot="{{ block.settings.product }}" style="top:{{ block.settings.vertical }}%; left:{{ block.settings.horizontal }}%;"></div>
            {% endfor %}
          </div>
        </picture>
      </div>
      <div class="dsgn-pck__content">
        <div class="dsgn-pck__inner-content">
          {%- for block in section.blocks -%}
            {%- assign product_handle = block.settings.product -%}
            <div id="dsgn-pck__product-id-{{ block.id }}" data-dsgn-pck-product-info="{{ product_handle }}" class="dsgn-pck__product-info {% if forloop.first %}dsgn-pck__product-info--active{% endif %}" {{ block.shopify_attributes }}>
                <div class="dsgn-pck__image__wrapper">
                  <svg viewBox="0 0 {{ all_products[product_handle].featured_image.width | default: '1000' }} {{ all_products[product_handle].featured_image.height | default: '1000' }}"></svg>
                  {%- if all_products[product_handle] != empty -%}
                    {%- capture sizes -%}
                      (max-width: 767px) 40vw, {{ section.settings.base_width | divided_by: 4.5 | append: 'vw' | default: '33vw' }}
                    {%- endcapture -%}
                    {{ all_products[product_handle].featured_image | image_url: width: 2800 | image_tag:  class: 'dsgn-pck__product-image__first', widths: widths, sizes: sizes }}
                  {%- else -%}
                    {{ 'product-1' | placeholder_svg_tag: 'dsgn-pck__placeholder' }}
                  {%- endif -%}
                </div>
                <div class="dsgn-pck__product-info__text-wrapper">
                  <h3 class="dsgn-pck__small-heading">{{ all_products[product_handle].title | default: 'Red backpack' }}</h3>
                  <a class="dsgn-pck__product-info__button dsgn-pck__button" href="{{ all_products[product_handle].url }}">{{ 'button_label' | t }}</a>
                </div>
            </div>
          {%- endfor -%}
        </div>
      </div>
    </div>
  </div>
</section>
{%- endcapture -%}
{{ minify | strip_newlines }}

{% schema %}
{
  "name": "Shop the look",
  "class": "DP__shop-the-look",
  "settings": [
    {
      "type": "image_picker",
      "id": "image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Explore our latest collection."
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "Text",
      "default": "<p>Group your products together in a single styled photograph and then pinpoint products or helpful tips for customers.</p>"
    },
    {
      "type": "header",
      "content": "✏️ Text appearance"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text size",
      "min": 80,
      "max": 150,
      "step": 5,
      "default": 120,
      "unit": "%"
    },
    {
      "type": "header",
      "content": "🎨 Design"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#4B4949"
    },
    {
      "type": "color",
      "id": "pin_highlight_color",
      "label": "Pin highlight",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "product_text_color",
      "label": "Product text",
      "default": "#4B4949"
    },
    {
      "type": "color_background",
      "id": "product_text_background_color",
      "label": "Product text background",
      "default": "linear-gradient(0deg, rgba(255, 255, 255, 1), rgba(255, 255, 255, 1) 100%)"
    },
    {
      "type": "color_background",
      "id": "background_color",
      "label": "Background",
      "default": "linear-gradient(180deg, rgba(242, 217, 220, 1), rgba(226, 132, 141, 1) 100%)"
    },
    {
      "type": "header",
      "content": "🖼 Layout"
    },
    {
      "type": "range",
      "id": "base_width",
      "label": "Size",
      "min": 70,
      "max": 100,
      "step": 5,
      "default": 80,
      "unit": "%"
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Maximum width",
      "placeholder": "eg. 1200px",
      "info": "Sets width constraint for content."
    },
    {
      "type": "range",
      "id": "inner_padding",
      "label": "Inner padding",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 40,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "outer_margin",
      "label": "Outer margin",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 0,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🚨 Advanced"
    },
    {
      "type": "html",
      "id": "custom_css",
      "label": "CSS"
    },
    {
      "type": "html",
      "id": "mobile_custom_css",
      "label": "Mobile CSS",
      "info": "Applied on screens less than 480px."
    },
    {
      "type": "checkbox",
      "id": "override_theme_font",
      "label": "Override default theme font",
      "default": true
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading",
      "default": "serif"
    },
    {
      "type": "font_picker",
      "id": "main_font",
      "label": "Text",
      "default": "sans-serif"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        },
        {
          "type": "range",
          "id": "horizontal",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Horizontal position",
          "default": 50
        },
        {
          "type": "range",
          "id": "vertical",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Vertical position",
          "default": 50
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Shop the look 🎒",
      "settings": {
      },
      "blocks": [
        {
          "type": "product",
          "settings": {
            "horizontal": 22,
            "vertical": 39
          }
        }
      ]
    }
  ],
  "locales": {
    "en": {
      "button_label": "View product"
    }
  }
}
{% endschema %}

<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }},
    "button_label": {{ 'button_label' | t | json }}
  }
</script>
{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}" type="module" defer>
(function(){

  const designPack = {
    settings: {},
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];
      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
    selectProduct: function(product_handle, product_dots, section){

      const active_product = section.querySelector(`[data-dsgn-pck-product-info="${product_handle}"]`);
      const active_dot = section.querySelector(`[data-dsgn-pck-product-dot="${product_handle}"]`);
      const product_infos = section.querySelectorAll(`[data-dsgn-pck-product-info]`)

      // Remove all dot classes and add active selection
      product_dots.forEach((product_dot) => {
        product_dot.classList.remove('dsgn-pck__product-dot--active');
      })
      active_dot.classList.add('dsgn-pck__product-dot--active');

      // Remove previous active product class and add active selection
      product_infos.forEach((product_info) => {
        product_info.classList.remove('dsgn-pck__product-info--active');
      })
      active_product.classList.add('dsgn-pck__product-info--active');

    },
    load: function(section){

      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: 0
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );
        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }

      // Grab all the product dots
      const product_dots = section.querySelectorAll('[data-dsgn-pck-product-dot]');
      // Setup Dot Event Listener
      product_dots.forEach((product_dot) => {
        product_dot.addEventListener('click', (e) => {
          const product_handle = e.target.dataset.dsgnPckProductDot;
          this.selectProduct(product_handle, product_dots, section);
        });
      });

    },
    unload: function(section){
      // Grab all the product dots
      const product_dots = section.querySelectorAll('[data-dsgn-pck-product-dot]');
      // Remove Dot Event Listener
      product_dots.forEach((product_dot) => {
        const product_handle = product_dot.dataset.dsgnPckProductDot;
        product_dot.removeEventListener('click', (e) => designPack.selectProduct(product_handle, product_dots, section));
      });
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  window.addEventListener('shopify:block:select', function (e) {
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    const product_dots = section.querySelectorAll('[data-dsgn-pck-product-dot]');
    const product_handle = e.target.dataset.dsgnPckProductInfo;

    designPack.selectProduct(product_handle, product_dots, section);
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);

  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>
